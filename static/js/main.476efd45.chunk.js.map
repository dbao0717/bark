{"version":3,"sources":["logo.svg","barks/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BarksComponent","props","textAreaRef","React","createRef","useState","newBarks","setNewBarks","className","onSubmit","event","preventDefault","newVal","current","value","tempNewBarks","unshift","content","likes","id","ref","required","name","type","BarksList","barksInit","setBarksInit","barks","setBarks","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadBarks","alert","map","item","index","Bark","bark","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","barksEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.476efd45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React , {useEffect, useState} from 'react'\r\n\r\nimport {loadBarks} from '../lookup'\r\n\r\nexport function BarksComponent(props) {\r\n    const textAreaRef = React.createRef()\r\n    const [newBarks, setNewBarks] = useState([])\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        let tempNewBarks = [...newBarks]\r\n        tempNewBarks.unshift({\r\n            content: newVal,\r\n            likes: 0,\r\n            id: 123\r\n        })\r\n        setNewBarks(tempNewBarks)\r\n        textAreaRef.current.value = ''\r\n    }\r\n    return <div className = {props.className}>\r\n        <div className = 'col-12 mb-3'>\r\n            <form onSubmit = {handleSubmit}>\r\n                <textarea ref = {textAreaRef} required = {true} className = 'form-control' name = 'tweet'>\r\n\r\n                </textarea>\r\n                <button type = 'submit' className = 'btn btn-primary my-3'>Bark</button>\r\n            </form>\r\n        </div>\r\n        <BarksList newBarks = {newBarks}/>\r\n    </div>\r\n    \r\n}\r\n\r\nexport function BarksList(props) {\r\n    const [barksInit, setBarksInit] = useState([])\r\n    const [barks, setBarks] = useState([])\r\n    useEffect(() => {\r\n        const final = [...props.newBarks].concat(barksInit)\r\n        if(final.length !== barks.length) {\r\n            setBarks(final)\r\n        }\r\n    }, [props.newBarks, barks, barksInit])\r\n    useEffect(() => {\r\n        const myCallback =  (response, status) => {\r\n        if(status === 200) {\r\n            setBarksInit(response)\r\n        } else {\r\n            alert(\"There was an error\")\r\n        }\r\n        }\r\n        loadBarks(myCallback)\r\n    }, [])\r\n    return barks.map((item, index)=>{\r\n        return <Bark bark = {item} className = 'my-5 py-5 border bg-white text-dark' key = {`${index}-{item.id}`}/>\r\n    })\r\n}\r\n\r\nexport function ActionBtn(props) {\r\n    const {bark, action} = props\r\n    const [likes, setLikes] = useState(bark.likes ? bark.likes : 0)\r\n    const [userLike, setUserLike] = useState(bark.userLike === true ? true : false)\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if(action.type === 'like') {\r\n            if(userLike === true) {\r\n                setLikes(likes - 1)\r\n                setUserLike(false)\r\n            } else {\r\n                setLikes(likes + 1)\r\n                setUserLike(true)\r\n            }\r\n        }\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className = {className} onClick = {handleClick}>{display}</button>\r\n  }\r\n  \r\nexport function Bark(props) {\r\nconst {bark} = props\r\nconst className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\nreturn <div className={className}>\r\n    <p>{bark.id} - {bark.content}</p>\r\n    <div className='btn btn-group'>\r\n    <ActionBtn bark = {bark} action={{type: \"like\", display:\"Likes\"}}/>\r\n    <ActionBtn bark = {bark} action={{type: \"unlike\", display:\"Unlike\"}}/>\r\n    <ActionBtn bark = {bark} action={{type: \"rebark\", display:\"Rebark\"}}/>\r\n    </div>\r\n</div>\r\n}","export function loadBarks(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET'\r\n    const url = \"http://localhost:8000/api/barks\"\r\n    const responseType = \"json\"\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function() {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"Request was an error\"}, 400)\r\n    }\r\n    xhr.send()\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {BarksComponent} from './barks'\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <BarksComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BarksComponent} from './barks'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif(appEl) {\n  ReactDOM.render(<App />, appEl)\n}\n\nconst barksEl = document.getElementById(\"idBark\")\nif(barksEl) {\n  ReactDOM.render(<BarksComponent />, barksEl)\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}